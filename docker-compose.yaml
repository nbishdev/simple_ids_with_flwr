networks:
  net1:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 191.160.0.0/24
          gateway: 191.160.0.1
  net2:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.0.0/24
          gateway: 192.168.0.1
services:
  flwr_s:
    image: tensorflow/tensorflow:2.9.2
    ports:
      - "80:8000"
    expose:
      - "8000"
    volumes:
      - ./:/root/
    networks:
      net1:
        ipv4_address: 191.160.0.2
      net2:
        ipv4_address: 192.168.0.2
    command:
      - /bin/sh
      - -c
      - |
        python3 -m pip install --upgrade flwr==1.0.0
        python3 /root/server.py
  flwr_c1:
    image: tensorflow/tensorflow:2.9.2
    ports:
      - "81:8000"
    expose:
      - "8000"
    volumes:
      - ./:/root/
    networks:
      net1:
        ipv4_address: 191.160.0.3
    command:
      - /bin/sh
      - -c
      - |
        python3 -m pip install --upgrade pandas scikit-learn flwr==1.0.0
        python3 /root/client.py --id 1 --address 191.160.0.2 --port 8000
    healthcheck:
        test: ["/bin/sh", "curl", "-f", "http://191.160.0.2:8000"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 5s
  flwr_c2:
    image: tensorflow/tensorflow:2.9.2
    ports:
      - "82:8000"
    expose:
      - "8000"
    volumes:
      - ./:/root/
    networks:
      net2:
        ipv4_address: 192.168.0.3
    command:
      - /bin/sh
      - -c
      - |
        python3 -m pip install --upgrade pandas scikit-learn flwr==1.0.0
        python3 /root/client.py --id 2 --address 192.168.0.2 --port 8000
    healthcheck:
        test: ["/bin/sh", "curl", "-f", "http://192.168.0.2:8000"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 5s
